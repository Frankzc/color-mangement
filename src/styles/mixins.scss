/* ===== src/styles/mixins.scss ===== */
// 使用内联函数替代darken，避免警告
@function darken-color($color, $amount) {
  @return mix(black, $color, $amount);
}

// 按钮混合器
@mixin button-style($bg-color, $text-color: white) {
  background-color: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $rounded-lg;
  padding: $spacing-sm $spacing-md;
  font-weight: 500;
  transition: all $transition-base;
  cursor: pointer;
  
  &:hover {
    background-color: darken-color($bg-color, 10%);
    transform: translateY(-1px);
    box-shadow: $shadow-md;
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    
    &:hover {
      transform: none;
      box-shadow: none;
    }
  }
}

// 卡片混合器
@mixin card-style {
  background: white;
  border-radius: $rounded-xl;
  box-shadow: $shadow;
  overflow: hidden;
  transition: all $transition-base;
  
  &:hover {
    box-shadow: $shadow-lg;
    transform: translateY(-2px);
  }
}

// 响应式混合器
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-sm - 1px}) { @content; }
  }
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  }
  @if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  }
  @if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  }
  @if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
  @if $breakpoint == 2xl {
    @media (min-width: $breakpoint-2xl) { @content; }
  }
}