// ===== src/styles/mixins.scss =====
// 按钮混合器
@mixin button-style($bg-color, $text-color: white) {
  background-color: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $rounded-lg;
  padding: $spacing-sm $spacing-md;
  font-weight: 500;
  transition: all $transition-base;
  cursor: pointer;
  
  &:hover {
    background-color: darken($bg-color, 10%);
    transform: translateY(-1px);
    box-shadow: $shadow-md;
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    
    &:hover {
      transform: none;
      box-shadow: none;
    }
  }
}

// 卡片混合器
@mixin card-style {
  background: white;
  border-radius: $rounded-xl;
  box-shadow: $shadow;
  overflow: hidden;
  transition: all $transition-base;
  
  &:hover {
    box-shadow: $shadow-lg;
    transform: translateY(-2px);
  }
}

// 输入框混合器
@mixin input-style {
  width: 100%;
  padding: $spacing-sm $spacing-md;
  border: 2px solid $gray-300;
  border-radius: $rounded-lg;
  transition: all $transition-base;
  
  &:focus {
    outline: none;
    border-color: $primary-blue;
    box-shadow: 0 0 0 3px rgba($primary-blue, 0.1);
  }
  
  &:disabled {
    background: $gray-100;
    cursor: not-allowed;
  }
  
  &.error {
    border-color: $primary-coral;
    
    &:focus {
      box-shadow: 0 0 0 3px rgba($primary-coral, 0.1);
    }
  }
}

// 响应式混合器
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-sm - 1px}) { @content; }
  }
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  }
  @if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  }
  @if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  }
  @if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
  @if $breakpoint == 2xl {
    @media (min-width: $breakpoint-2xl) { @content; }
  }
}

// 文本截断混合器
@mixin text-truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// 居中混合器
@mixin center($direction: both) {
  position: absolute;
  
  @if $direction == both {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $direction == vertical {
    top: 50%;
    transform: translateY(-50%);
  } @else if $direction == horizontal {
    left: 50%;
    transform: translateX(-50%);
  }
}

// 清除浮动混合器
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// 渐变背景混合器
@mixin gradient-bg($color1, $color2, $direction: 45deg) {
  background: linear-gradient($direction, $color1 0%, $color2 100%);
}

// 阴影混合器
@mixin box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: $shadow-sm;
  } @else if $level == 2 {
    box-shadow: $shadow;
  } @else if $level == 3 {
    box-shadow: $shadow-md;
  } @else if $level == 4 {
    box-shadow: $shadow-lg;
  } @else if $level == 5 {
    box-shadow: $shadow-xl;
  }
}